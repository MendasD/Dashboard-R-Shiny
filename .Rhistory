shiny::runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
install.packages("bs4Dash")
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
shiny::runApp('FoodSold')
shiny::runApp('FoodSold')
runApp('FoodSold')
shiny::runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
# Chargement des données
commande <- read.csv("E:/Ecole/AS2/Semestre2/Tableau de bord/R/Groupe_CAMER_Shiny/Data/commandes.csv")
library(shiny)
library(shinydashboard)
library(dplyr)
library(ggplot2)
library(sf)
library(leaflet)
library(plotly)
library(lubridate)
library(readxl)
# Chargement des données
commande <- read.csv("E:/Ecole/AS2/Semestre2/Tableau de bord/R/Groupe_CAMER_Shiny/Data/commandes.csv")
livraison <- read.csv("E:/Ecole/AS2/Semestre2/Tableau de bord/R/Groupe_CAMER_Shiny/Data/livraisons.csv")
plat <- read_excel("E:/Ecole/AS2/Semestre2/Tableau de bord/R/Groupe_CAMER_Shiny/Data/plat.xlsx")
library(shiny)
library(shinydashboard)
library(dplyr)
library(ggplot2)
library(sf)
library(leaflet)
library(plotly)
library(lubridate)
library(readxl)
# Chargement des données
commande <- read.csv("E:/Ecole/AS2/Semestre2/Tableau de bord/R/Groupe_CAMER_Shiny/Data/commandes.csv")
livraison <- read.csv("E:/Ecole/AS2/Semestre2/Tableau de bord/R/Groupe_CAMER_Shiny/Data/livraisons.csv")
plat <- read_excel("E:/Ecole/AS2/Semestre2/Tableau de bord/R/Groupe_CAMER_Shiny/Data/plats.xlsx")
regions <- st_read("E:/Ecole/AS2/Semestre2/SIG/Donnnees_cours/Données/SEN_adm/SEN_adm1.shp")
regions <- regions[, c("ID_region", "NAME_1", "geometry")]
colnames(regions)[1:2] <- c("ID_region", "region")
commande$date_commande <- as.POSIXct(commande$date_commande, format = "%Y-%m-%d %H:%M:%S")
livraison$date_livraison <- as.POSIXct(livraison$date_livraison, format = "%Y-%m-%d %H:%M:%S")
# Fonction pour format K/M
format_abbr <- function(x) {
if (is.na(x)) return("NA")
if (x >= 1e6) {
return(paste0(round(x / 1e6, 1), "M"))
} else if (x >= 1e3) {
return(paste0(round(x / 1e3, 1), "K"))
} else {
return(as.character(round(x, 2)))
}
}
# UI
ui <- dashboardPage(
dashboardHeader(title = "Suivi des livraisons"),
dashboardSidebar(
sidebarMenu(
menuItem("Tableau de bord", tabName = "dashboard", icon = icon("dashboard"))
)
),
dashboardBody(
tags$style(HTML(".value-box .small-box p { font-weight: bold; font-size: 40px; color: #000; }")),
fluidRow(
column(3, dateRangeInput("date_range", "Période", start = Sys.Date() - 30, end = Sys.Date())),
column(3, selectInput("plats", "Plats", choices = unique(plat$nom_plat), multiple = TRUE)),
column(3, selectInput("categories", "Catégories", choices = unique(plat$type), multiple = TRUE)),
column(3, selectInput("regions", "Régions", choices = unique(regions$region), multiple = TRUE))
),
tabItems(
tabItem(tabName = "dashboard",
fluidRow(
valueBoxOutput("revenus_commandes", width = 3),
valueBoxOutput("revenus_livraisons", width = 3),
valueBoxOutput("benefice_net", width = 3),
valueBoxOutput("temps_moyen_livraison", width = 3)
),
fluidRow(
valueBoxOutput("total_commandes", width = 3),
valueBoxOutput("commandes_livrees", width = 3),
valueBoxOutput("commandes_attente", width = 3),
valueBoxOutput("commandes_annulees", width = 3)
),
fluidRow(
box(title = "Carte des ventes par région", width = 6, leafletOutput("map", height = 400)),
box(title = "Évolution des ventes dans le temps", width = 6, plotlyOutput("evol_commandes"))
),
fluidRow(
box(title = "Top plats commandés", width = 6, plotlyOutput("top_plats")),
box(title = "Top catégories commandées", width = 6, plotlyOutput("top_categories"))
)
)
)
)
)
# Server
server <- function(input, output, session) {
commande_filtered <- reactive({
data <- commande %>%
left_join(plat, by = "id_plat") %>%
filter(date_commande >= input$date_range[1],
date_commande <= input$date_range[2])
data <- data %>% left_join(regions %>% st_drop_geometry(), by = "ID_region")
if (!is.null(input$plats) && length(input$plats) > 0) {
data <- data %>% filter(nom_plat %in% input$plats)
}
if (!is.null(input$categories) && length(input$categories) > 0) {
data <- data %>% filter(type %in% input$categories)
}
if (!is.null(input$regions) && length(input$regions) > 0) {
data <- data %>% filter(region %in% input$regions)
}
data
})
output$total_commandes <- renderValueBox({
valueBox(nrow(commande_filtered()), "Total Commandes", icon = icon("shopping-cart"), color = "primary")
})
output$commandes_livrees <- renderValueBox({
valueBox(sum(commande_filtered()$status == "Livrée"), "Commandes livrées", icon = icon("check"), color = "success")
})
output$commandes_attente <- renderValueBox({
valueBox(sum(commande_filtered()$status == "En attente"), "Commandes en attente", icon = icon("clock"), color = "warning")
})
output$commandes_annulees <- renderValueBox({
valueBox(sum(commande_filtered()$status == "Annulée"), "Commandes annulées", icon = icon("times"), color = "danger")
})
output$revenus_commandes <- renderValueBox({
total <- sum(commande_filtered()$qte * commande_filtered()$prix, na.rm = TRUE)
valueBox(paste0(format_abbr(total), " FCFA"), "Revenus des commandes", icon = icon("euro-sign"), color = "info")
})
output$revenus_livraisons <- renderValueBox({
total <- livraison %>%
filter(id_commande %in% commande_filtered()$id_commande) %>%
pull(montant_livraison) %>%
sum(na.rm = TRUE)
valueBox(paste0(format_abbr(total), " FCFA"), "Revenus des livraisons", icon = icon("euro-sign"), color = "teal")
})
output$temps_moyen_livraison <- renderValueBox({
merged <- livraison %>%
filter(id_commande %in% commande_filtered()$id_commande) %>%
left_join(commande_filtered(), by = "id_commande") %>%
mutate(duree = as.numeric(difftime(date_livraison, date_commande, units = "mins")))
moy <- mean(merged$duree, na.rm = TRUE)
valueBox(paste0(round(moy, 1), " min"), "Temps moyen livraison", icon = icon("clock"), color = "olive")
})
output$benefice_net <- renderValueBox({
rev_commande <- sum(commande_filtered()$qte * commande_filtered()$prix, na.rm = TRUE)
rev_livraison <- livraison %>%
filter(id_commande %in% commande_filtered()$id_commande) %>%
pull(montant_livraison) %>%
sum(na.rm = TRUE)
benef <- rev_commande + rev_livraison
valueBox(paste0(format_abbr(benef), " FCFA"), "Bénéfice net", icon = icon("chart-line"), color = "fuchsia")
})
output$top_plats <- renderPlotly({
top <- commande_filtered() %>%
count(nom_plat, sort = TRUE) %>%
top_n(5, n)
plot_ly(top, x = ~n, y = ~reorder(nom_plat, n), type = 'bar', orientation = 'h',
marker = list(color = ~n, colorscale = 'Viridis')) %>%
layout(title = "", xaxis = list(title = ""), yaxis = list(title = "Plat"))
})
output$top_categories <- renderPlotly({
top <- commande_filtered() %>%
count(type, sort = TRUE) %>%
top_n(5, n)
plot_ly(top, x = ~n, y = ~reorder(type, n), type = 'bar', orientation = 'h',
marker = list(color = ~n, colorscale = 'Cividis')) %>%
layout(title = "", xaxis = list(title = ""), yaxis = list(title = "Catégorie"))
})
output$evol_commandes <- renderPlotly({
evo <- commande_filtered() %>%
mutate(semaine = floor_date(date_commande, "week")) %>%
count(semaine)
plot_ly(evo, x = ~semaine, y = ~n, type = 'scatter', mode = 'lines+markers') %>%
layout(title = "Évolution des commandes", xaxis = list(title = "Date"), yaxis = list(title = "Commandes"))
})
output$map <- renderLeaflet({
count_data <- commande_filtered() %>%
group_by(ID_region) %>%
summarise(nb_commandes = n(), .groups = "drop")
data_map <- left_join(regions, count_data, by = "ID_region")
pal <- colorNumeric("YlOrRd", domain = data_map$nb_commandes)
leaflet(data_map) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(fillColor = ~pal(nb_commandes),
color = "white", weight = 1, fillOpacity = 0.7,
popup = ~paste(region, ":", nb_commandes, "commandes")) %>%
addLegend(pal = pal, values = ~nb_commandes, title = "Commandes")
})
}
shinyApp(ui, server)
runApp('FoodSold/modules/livraison.R')
runApp('FoodSold')
runApp('FoodSold/modules/livraison.R')
runApp('FoodSold/modules/livraison.R')
runApp('FoodSold/modules/livraison.R')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold/modules/repas.R')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold/modules/employes.R')
runApp('FoodSold/modules/employes.R')
runApp('FoodSold')
runApp('FoodSold/modules/employes.R')
runApp('FoodSold')
runApp('FoodSold/modules/salaires.R')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold/modules/livraison.R')
runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
shiny::runApp('FoodSold')
runApp('FoodSold')
runApp('FoodSold')
